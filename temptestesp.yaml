esphome:
  name: temptestesp
  platform: ESP32
  board: esp32doit-devkit-v1

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    # Set this to the IP of the ESP
    static_ip: 172.18.1.10
    # Set this to the IP address of the router. Often ends with .1
    gateway: 172.18.1.1
    # The subnet of the network. 255.255.255.0 works for most home networks.
    subnet: 255.255.255.0

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:
# Global Variables
globals:
  - id: iaq_index
    type: int
    restore_value: no
    initial_value: '0'
    
# Example configuration entry
i2c:
  sda: 21
  scl: 22
  scan: True
#  frequency: 100khz
# Example configuration entry
#switch:
#  - platform: gpio
#    pin: GPIO13
#    name: "Reset CCS811"
#    restore_mode: ALWAYS_ON
#  - platform: gpio
#    pin: GPIO12
#    name: "NWAKE CCS811"
#    restore_mode: ALWAYS_OFF
  
# Example configuration entry
sensor:
  - platform: hdc1080
    temperature:
      id: hdc_temp
      name: "HDC1080 Temperature"
    humidity:
      id: hdc_humi
      name: "HDC1080 Humidity"
    address: 0x40
    update_interval: 20s
  - platform: ccs811
    eco2:
      name: "CCS811 eCO2 Value"
      id: eco2
    tvoc:
      name: "CCS811 Total Volatile Organic Compound"
      id: tvoc
    address: 0x5A
    update_interval: 20s
    temperature: hdc_temp
    humidity: hdc_humi
  - platform: bme680
    temperature:
      name: "BME680 Temperature"
      oversampling: 16x
    pressure:
      name: "BME680 Pressure"
    humidity:
      name: "BME680 Humidity"
    gas_resistance:
      name: "BME680 Gas Resistance"
    address: 0x77
    update_interval: 20s
  - platform: sgp30
    eco2:
      name: "Workshop eCO2"
      accuracy_decimals: 1
    tvoc:
      name: "Workshop TVOC"
      accuracy_decimals: 1
    compensation:
      temperature_source: hdc_temp
      humidity_source: hdc_humi
    address: 0x58
    update_interval: 20s
    
text_sensor:  
  - platform: template
    name: "Livingroom IAQ"
    icon: "mdi:air-filter"
    lambda: |-
      id(iaq_index) = 0;
      
      /*
       * Transform indoor humidity values to IAQ points according to Indoor Air Quality UK: 
       * http://www.iaquk.org.uk/
       */
      if (id(hdc_humi).state < 10 or id(hdc_humi).state > 90) {
        id(iaq_index) += 1;
      }
      else if (id(hdc_humi).state < 20 or id(hdc_humi).state > 80) {
        id(iaq_index) += 2;
      }
      else if (id(hdc_humi).state < 30 or id(hdc_humi).state > 70) {
        id(iaq_index) += 3;
      }
      else if (id(hdc_humi).state < 40 or id(hdc_humi).state > 60) {
        id(iaq_index) += 4;
      }
      else if (id(hdc_humi).state >= 40 and id(hdc_humi).state <= 60) {
        id(iaq_index) += 5;
      }
      
      /*
       * Transform eCO2 values to IAQ points according to Indoor Air Quality UK: 
       * http://www.iaquk.org.uk/
       */
      if (id(eco2).state <= 600) {
        id(iaq_index) += 5;
      }
      else if (id(eco2).state <= 800) {
        id(iaq_index) += 4;
      }
      else if (id(eco2).state <= 1500) {
        id(iaq_index) += 3;
      }
      else if (id(eco2).state <= 1800) {
        id(iaq_index) += 2;
      }
      else if (id(eco2).state > 1800) {
        id(iaq_index) += 1;
      }
      
      /*
       * Transform TVOC values to IAQ points according to German environmental guidelines: 
       * https://www.repcomsrl.com/wp-content/uploads/2017/06/Environmental_Sensing_VOC_Product_Brochure_EN.pdf
       */
      if (id(tvoc).state <= 65) {
        id(iaq_index) += 5;
      }
      else if (id(tvoc).state <= 220) {
        id(iaq_index) += 4;
      }
      else if (id(tvoc).state <= 660) {
        id(iaq_index) += 3;
      }
      else if (id(tvoc).state <= 2200) {
        id(iaq_index) += 2;
      }
      else if (id(tvoc).state > 2200) {
        id(iaq_index) += 1;
      }

      /*
       * Transform IAQ index to human readable text according to Indoor Air Quality UK: 
       * http://www.iaquk.org.uk/
       */
      ESP_LOGD("main", "Current IAQ index %d", id(iaq_index));
      
      if (id(iaq_index) <= 6) {
        return {"Unhealty"};
      }
      else if (id(iaq_index) <= 9) {
        return {"Poor"};
      }
      else if (id(iaq_index) <= 12) {
        return {"Moderate"};
      }
      else if (id(iaq_index) <= 14) {
        return {"Good"};
      }
      else if (id(iaq_index) > 14) {
        return {"Excellent"};
      }
      
      return {};
    update_interval: 60s