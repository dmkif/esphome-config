esphome:
  name: lolinpadawan
  platform: ESP32
  board: lolin_d32
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # Optional manual IP
  #manual_ip:
  #  static_ip: 172.18.1.20
  #  gateway: 172.18.1.2
  #  subnet: 255.255.255.0 
  # Enable Fast Connect
  fast_connect: True
  
# Enable logging
logger:
  #level: VERY_VERBOSE

# Enable Home Assistant API
api:

ota:
# Global Variables
globals:
  - id: iaq_index
    type: int
    restore_value: no
    initial_value: '0'

# Enable Webserver
#web_server:
#  port: 80
# Example configuration entry
i2c:
  sda: 21
  scl: 22
  scan: True
#  frequency: 100khz
# Example configuration entry
switch:
  - platform: gpio
    pin: GPIO26
    name: "Reset CCS811"
    restore_mode: ALWAYS_ON
  - platform: gpio
    pin: GPIO25
    name: "WAKEUP CCS811"
    restore_mode: ALWAYS_OFF

# Example configuration entry
sensor:
  - platform: hdc1080
    temperature:
      id: hdc_temp
      name: "HDC1080 Temperature"
    humidity:
      id: hdc_humi
      name: "HDC1080 Humidity"
      filters:
      - offset: -10.0
    address: 0x40
    update_interval: 30s
  - platform: ccs811
    eco2:
      name: "CCS811 eCO2 Value"
      id: eco2
    tvoc:
      name: "CCS811 Total Volatile Organic Compound"
      id: tvoc
    address: 0x5A
    update_interval: 10s
    temperature: bme680_temp
    humidity: bme680_hum
    #wakeuppin: GPIO25
  - platform: bme680
    temperature:
      name: "BME680 Temperature"
      id: bme680_temp
      oversampling: 16x
    pressure:
      name: "BME680 Pressure"
      id: bme680_press
    humidity:
      name: "BME680 Humidity"
      id: bme680_hum
    gas_resistance:
      name: "BME680 Gas Resistance"
      id: bme680_gas
    address: 0x77
    update_interval: 10s
  - platform: bme680
    temperature:
      name: "BME680-2 Temperature"
      oversampling: 16x
    pressure:
      name: "BME680-2 Pressure"
    humidity:
      name: "BME680-2 Humidity"
    gas_resistance:
      name: "BME680-2 Gas Resistance"
    address: 0x76
    update_interval: 10s
  # - platform: sgp30
  #   eco2:
  #     name: "SGP30 eCO2"
  #     accuracy_decimals: 1
  #   tvoc:
  #     name: "SGP30 TVOC"
  #     accuracy_decimals: 1
  #   compensation:
  #     temperature_source: bme680_temp
  #     humidity_source: bme680_hum
  #   address: 0x58
  #   update_interval: 60s
text_sensor:  
  - platform: template
    name: "BME680 IAQ"
    icon: "mdi:air-filter"
    lambda: |-
      float base_temp = 21.00;
      float base_hum = 40.00;
      float base_rest = 5.00;
      
      //float iaq_res = ((79 - id(bme680_temp).state)/(79*3.3))+((60-id(bme680_hum).state)/(60*5.6))+((id(bme680_gas).state / base_rest)*4.9);
      float iaq_res = ((100-base_temp-id(bme680_temp).state)/(100-base_temp)*(0.047*100))+((100-base_hum-id(bme680_hum).state)/(100-base_hum)*(0.08*100))+((id(bme680_gas).state/5000)*(0.7*100));
      
      ESP_LOGD("main", "Current BME680 values temp: %f hum: %f gas: %f", id(bme680_temp).state,id(bme680_hum).state,id(bme680_gas).state);
      ESP_LOGD("main", "Current BME680 IAQ index %f", iaq_res);
      ESP_LOGD("main", "Current BME680 IAQ index %d", iaq_res);
      
      if (iaq_res <= 50) {
        return {"extreme Unhealty"};
      }
      else if (iaq_res <= 100) {
        return {"Unhealty"};
      }
      else if (iaq_res <= 150) {
        return {"Poor"};
      }
      else if (iaq_res <= 200) {
        return {"Moderate"};
      }
      else if (iaq_res <= 300) {
        return {"Good"};
      }
      else if (iaq_res > 300) {
        return {"Excellent"};
      }
      return {};
    update_interval: 30s
      
  - platform: template
    name: "CCS811 Livingroom IAQ"
    icon: "mdi:air-filter"
    lambda: |-
      id(iaq_index) = 0;
      
      //*
      //* Transform indoor humidity values to IAQ points according to Indoor Air Quality UK: 
      // * http://www.iaquk.org.uk/
      //*/
      if (id(bme680_hum).state < 10 or id(bme680_hum).state > 90) {
        id(iaq_index) += 1;
      }
      else if (id(bme680_hum).state < 20 or id(bme680_hum).state > 80) {
        id(iaq_index) += 2;
      }
      else if (id(bme680_hum).state < 30 or id(bme680_hum).state > 70) {
        id(iaq_index) += 3;
      }
      else if (id(bme680_hum).state < 40 or id(bme680_hum).state > 60) {
        id(iaq_index) += 4;
      }
      else if (id(bme680_hum).state >= 40 and id(bme680_hum).state <= 60) {
        id(iaq_index) += 5;
      }
      
      /*
       * Transform eCO2 values to IAQ points according to Indoor Air Quality UK: 
       * http://www.iaquk.org.uk/
       */
      if (id(eco2).state <= 600) {
        id(iaq_index) += 5;
      }
      else if (id(eco2).state <= 800) {
        id(iaq_index) += 4;
      }
      else if (id(eco2).state <= 1500) {
        id(iaq_index) += 3;
      }
      else if (id(eco2).state <= 1800) {
        id(iaq_index) += 2;
      }
      else if (id(eco2).state > 1800) {
        id(iaq_index) += 1;
      }
      
      /*
       * Transform TVOC values to IAQ points according to German environmental guidelines: 
       * https://www.repcomsrl.com/wp-content/uploads/2017/06/Environmental_Sensing_VOC_Product_Brochure_EN.pdf
       */
      if (id(tvoc).state <= 65) {
        id(iaq_index) += 5;
      }
      else if (id(tvoc).state <= 220) {
        id(iaq_index) += 4;
      }
      else if (id(tvoc).state <= 660) {
        id(iaq_index) += 3;
      }
      else if (id(tvoc).state <= 2200) {
        id(iaq_index) += 2;
      }
      else if (id(tvoc).state > 2200) {
        id(iaq_index) += 1;
      }

      /*
       * Transform IAQ index to human readable text according to Indoor Air Quality UK: 
       * http://www.iaquk.org.uk/
       */
      ESP_LOGD("main", "Current IAQ index %d", id(iaq_index));
      
      if (id(iaq_index) <= 6) {
        return {"Unhealty"};
      }
      else if (id(iaq_index) <= 9) {
        return {"Poor"};
      }
      else if (id(iaq_index) <= 12) {
        return {"Moderate"};
      }
      else if (id(iaq_index) <= 14) {
        return {"Good"};
      }
      else if (id(iaq_index) > 14) {
        return {"Excellent"};
      }
      
      return {};
    update_interval: 30s
  
# Example configuration entry
#deep_sleep:
#  run_duration: 40s
#  sleep_duration: 55s